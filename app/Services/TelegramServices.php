<?php


namespace App\Services;


use App\Common\Facade\Console;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use Illuminate\Support\Facades\Log;

/**
 * @author https://github.com/CuaMcCarsaree44
 * @since September, 9/9/2021 2021 00:40:00
 *
 * TelegramServices
 * A service to support monitoring via Telegram.
 */
class TelegramServices
{
    const TELEGRAM_CHAT_CHARACTERS_LIMIT = 2000;

    /**
     * request
     *  An API Callback to use Telegram API.
     */
    private function request(string $method, string $path, mixed $data, bool $multipart = false): void
    {
        try {
            $client = new Client();

            if($multipart){

                $multipart_params = [];

                foreach($data as $key => $set){
                    if(!empty($set)){
                        if(is_object($set)){
                            /**
                             * @see https://www.php.net/manual/en/class.splfileinfo.php
                             *
                             * Currently multipart only supports for file that directly generated by PHP it self.
                             */
                            $multipart_params[] = [
                                'filename' => "File Report Log ".date('Y-m-d H:i:s', strtotime('now')).".xlsx",
                                'name' => $key,
                                'contents' => file_get_contents($set->getPathName())
                            ];

                        }else{
                            $multipart_params[] = [
                                "name" => $key,
                                "contents" => $set
                            ];
                        }
                    }
                }

                $param["multipart"] = $multipart_params;
            }else{
                $param['json'] = $data;
            }

            $client->request(
                $method,
                (env('TELEGRAM_BASE_URL') . env('TELEGRAM_API_KEY') . $path),
                $param
            );
            return;
        } catch (RequestException $exception) {
//            Log::alert($exception->getResponse()->getBody()->getContents());

            $environment = env('APP_ENV');

            Log::alert("[$environment]" . json_encode($exception->getMessage()));
        }
    }

    public function sendMessage($message): void {
        Console::writeLine($message);

        if(strlen($message) >= self::TELEGRAM_CHAT_CHARACTERS_LIMIT){
            $message = substr(
                    $message,
                    0,
                    self::TELEGRAM_CHAT_CHARACTERS_LIMIT - 20).". . . . . Message length exceed ".self::TELEGRAM_CHAT_CHARACTERS_LIMIT." characters. Please check log file.";
        }

        $this->request(
            'POST',
            '/sendMessage',
            [
                "chat_id" => env('TELEGRAM_CHAT_ID'),
                "text" => "[Environment ". env('APP_ENV') ."]\n" . $message
            ]
        );
    }

    public function sendDocument($document, $caption = ""): void {
        Console::writeLine($caption);

        if(strlen($caption) >= self::TELEGRAM_CHAT_CHARACTERS_LIMIT){
            $caption = substr(
                    $caption,
                    0,
                    self::TELEGRAM_CHAT_CHARACTERS_LIMIT - 3).". . . . . Message length exceed ".self::TELEGRAM_CHAT_CHARACTERS_LIMIT." characters. Please check log file.";
        }

        $this->request(
            'POST',
            '/sendDocument',
            [
                "chat_id" => env('TELEGRAM_CHAT_ID'),
                "document" => $document,
                "caption" => $caption
            ],
            true
        );
    }

}
